}
train_dataset <- convert_to_numeric(train_dataset, c("MSZoning","HouseStyle", "LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
test_dataset <- convert_to_numeric(test_dataset, c("MSZoning","HouseStyle", "LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
result <- sapply(vars_to_check, function(var) sum(is.na(train_dataset[[var]])))
result1 <- sapply(vars_to_check, function(var) sum(is.na(test_dataset[[var]])))
test_dataset$BsmtQual[is.na(test_dataset$BsmtQual)] <- mean(test_dataset$BsmtQual, na.rm = TRUE)
test_dataset$GarageYrBlt[is.na(test_dataset$GarageYrBlt)] <- mean(test_dataset$GarageYrBlt, na.rm = TRUE)
test_dataset$MasVnrType[is.na(test_dataset$MasVnrType)] <- mean(test_dataset$MasVnrType, na.rm = TRUE)
test_dataset$BsmtExposure[is.na(test_dataset$BsmtExposure)] <- mean(test_dataset$BsmtExposure, na.rm = TRUE)
test_dataset$BsmtFinType2[is.na(test_dataset$BsmtFinType2)] <- mean(test_dataset$BsmtFinType2, na.rm = TRUE)
test_dataset$Electrical[is.na(test_dataset$Electrical)] <- mean(test_dataset$Electrical, na.rm = TRUE)
test_dataset$KitchenQual[is.na(test_dataset$KitchenQual)] <- mean(test_dataset$KitchenQual, na.rm = TRUE)
test_dataset$SaleType[is.na(test_dataset$SaleType)] <- mean(test_dataset$SaleType, na.rm = TRUE)
test_dataset$MSZoning[is.na(test_dataset$MSZoning)] <- mean(test_dataset$MSZoning, na.rm = TRUE)
test_dataset$BsmtCond[is.na(test_dataset$BsmtCond)] <- mean(test_dataset$BsmtCond, na.rm = TRUE)
test_dataset$Functional[is.na(test_dataset$Functional)] <- mean(test_dataset$Functional, na.rm = TRUE)
cols_to_scale <- c("MSSubClass", "MSZoning", "LotArea", "LotShape",
"LandContour", "LotConfig", "LandSlope", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "OverallQual", "OverallCond",
"YearBuilt", "YearRemodAdd", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "MasVnrArea", "ExterQual", "ExterCond",
"Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
"BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
"Heating", "HeatingQC", "CentralAir", "Electrical", "X1stFlrSF",
"X2ndFlrSF", "LowQualFinSF", "GrLivArea", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "KitchenQual",
"TotRmsAbvGrd", "Functional", "Fireplaces", "GarageType",
"GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"X3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal", "MoSold", "YrSold",
"SaleType", "SaleCondition")
cols_to_scale <- trimws(cols_to_scale)
train_dataset[, cols_to_scale] <- scale(train_dataset[, cols_to_scale])
install.packages("caret")
install.packages("caret")
library(caret)
data_df <- as.data.frame(train_dataset)
data_df_test <- as.data.frame(test_dataset)
model <- lm(SalePrice ~ MSZoning + LotShape + LotConfig + LandContour + LandSlope + Neighborhood + Condition1 +
BldgType + RoofStyle + RoofMatl + Exterior1st + Condition2 + Exterior2nd + MasVnrType +
ExterQual + ExterCond + Foundation + BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 +
BsmtFinType2 + Heating + HeatingQC + CentralAir + Electrical + KitchenQual + Functional +
GarageType + GarageFinish + GarageQual + GarageCond + PavedDrive + SaleType + SaleCondition,
data = data_df)
# Split data into training and validation sets
trainIndex <- createDataPartition(data_df$SalePrice, p = 0.7, list = FALSE)
train_data <- data_df[trainIndex, ]
validation_data <- data_df[-trainIndex, ]
#Fit linear regression model
# Make predictions on validation set using linear regression model
predictions <- predict(model, newdata = validation_data)
# Evaluate model accuracy using R-squared
accuracy <- summary(model)$r.squared * 100
mse <- mean((predictions - validation_data$SalePrice)^2)
rmse <- sqrt(mse)
cat(paste0("Linear regression RMSE: ", round(rmse, 2)))
cat(paste0("Linear regression accuracy: ", round(accuracy, 2), "%\n"))
cat(paste0("Linear regression MSE: ", round(mse, 2), "\n"))
cat(paste0("Linear regression R-squared: ", round(r_squared, 2), "\n"))
library(e1071)
model <- svm(SalePrice ~ ., data = data_df)
# Make predictions on validation set using SVM model
predictions <- predict(model, newdata = validation_data)
# Evaluate model accuracy using MSE and R-squared
mse <- mean((predictions - validation_data$SalePrice)^2)
accuracy <- 100 * (1 - mse/var(validation_data$SalePrice))
R2 <- 1 - mse/var(validation_data$SalePrice)
cat(paste0("SVM accuracy: ", round(accuracy, 2), "%"))
cat(paste0("SVM MSE: ", round(mse, 2)))
rmse <- sqrt(mse)
cat(paste0("SVM RMSE: ", round(rmse, 2)))
cat(paste0("SVM R-squared: ", round(R2, 2)))
model <- randomForest(SalePrice ~ ., data = data_df)
library(randomForest)
# Fit random forest model
model <- randomForest(SalePrice ~ ., data = data_df)
# Make predictions on validation set using random forest model
predictions <- predict(model, newdata = validation_data)
# Evaluate model accuracy using MSE and R-squared
mse <- mean((predictions - validation_data$SalePrice)^2)
accuracy <- 100 * (1 - mse/var(validation_data$SalePrice))
R2 <- 1 - mse/var(validation_data$SalePrice)
cat(paste0("Random forest accuracy: ", round(accuracy, 2), "%"))
cat(paste0("Random forest MSE: ", round(mse, 2)))
cat(paste0("Random forest R-squared: ", round(R2, 2)))
library(randomForest)
model <- randomForest(SalePrice ~ ., data = data_df)
# Make predictions on validation set using random forest model
predictions <- predict(model, newdata = validation_data)
# Evaluate model accuracy using MSE and R-squared
mse <- mean((predictions - validation_data$SalePrice)^2)
accuracy <- 100 * (1 - mse/var(validation_data$SalePrice))
R2 <- 1 - mse/var(validation_data$SalePrice)
cat(paste0("Random forest accuracy: ", round(accuracy, 2), "%"))
cat(paste0("Random forest MSE: ", round(mse, 2)))
rmse <- sqrt(mse)
cat(paste0("Random forest RMSE: ", round(rmse, 2)))
cat(paste0("Random forest R-squared: ", round(R2, 2)))
submission <- data.frame(Id = data_df_test$Id[1:length(predictions)], SalePrice = predictions)
write.csv(submission, file = "submission.csv", row.names = FALSE)
submission <- data.frame(Id = data_df_test$Id[1:length(predictions)], SalePrice = predictions)
write.csv(submission, file = "submission.csv", row.names = FALSE)
View(test_dataset)
data_df_test <- as.data.frame(test_dataset)
View(data_df_test)
test_dataset[, cols_to_scale] <- scale(test_dataset[, cols_to_scale])
cols_to_scale <- c("MSSubClass", "MSZoning", "LotArea", "LotShape",
"LandContour", "LotConfig", "LandSlope", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "OverallQual", "OverallCond",
"YearBuilt", "YearRemodAdd", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "MasVnrArea", "ExterQual", "ExterCond",
"Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
"BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
"Heating", "HeatingQC", "CentralAir", "Electrical", "X1stFlrSF",
"X2ndFlrSF", "LowQualFinSF", "GrLivArea", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "KitchenQual",
"TotRmsAbvGrd", "Functional", "Fireplaces", "GarageType",
"GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"X3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal", "MoSold", "YrSold",
"SaleType", "SaleCondition")
cols_to_scale <- trimws(cols_to_scale)
test_dataset[, cols_to_scale] <- scale(test_dataset[, cols_to_scale])
names(test_dataset)
cols_to_scale <- c("MSSubClass", "MSZoning", "LotArea", "LotShape",
"LandContour", "LotConfig", "LandSlope", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "OverallQual", "OverallCond",
"YearBuilt", "YearRemodAdd", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "MasVnrArea", "ExterQual", "ExterCond",
"Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
"BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
"Heating", "HeatingQC", "CentralAir", "Electrical", "X1stFlrSF",
"X2ndFlrSF", "LowQualFinSF", "GrLivArea", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "KitchenQual",
"TotRmsAbvGrd", "Functional", "Fireplaces", "GarageType",
"GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"X3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal", "MoSold", "YrSold",
"SaleType", "SaleCondition")
cols_to_scale <- trimws(cols_to_scale)
train_dataset[, cols_to_scale] <- scale(train_dataset[, cols_to_scale])
cols_to_scale <- trimws(cols_to_scale)
test_dataset[, cols_to_scale] <- scale(test_dataset[, cols_to_scale])
names(test_dataset)
View(model)
submission <- data.frame(Id = data_df_test$Id[1:length(predictions)], SalePrice = predictions)
write.csv(submission, file = "submission.csv", row.names = FALSE)
submission <- data.frame(Id = test_dataset$Id[1:length(predictions)], SalePrice = predictions)
write.csv(submission, file = "newSubmission.csv", row.names = FALSE)
# Generate predictions for test dataset
predictions <- predict(model, newdata = test_dataset)
names(test_dataset)
names(train_data)
predictions <- predict(model, newdata = test_dataset)
names(test_dataset)
names(train_data)
#read the data
library(readr)
library(dplyr)
train_dataset<-read.csv("train.csv")
test_dataset <-read_csv("test.csv")
print(train_dataset)
str(train_dataset)
summary(train_dataset)
# Columns to remove
cols_to_remove <- c("Street", "Alley", "Utilities", "PoolQC", "Fence", "MiscFeature", "FireplaceQu","LotFrontage")
# Remove the columns
train_dataset <- select(train_dataset, -one_of(cols_to_remove))
test_dataset <- select(test_dataset, -one_of(cols_to_remove))
str(train_dataset)
summary(train_dataset)
#remove row that have NA values before 1461 after 1341
train_dataset <- train_dataset[complete.cases(train_dataset$BsmtQual), ]
train_dataset <- train_dataset[complete.cases(train_dataset$GarageYrBlt), ]
train_dataset <- train_dataset[complete.cases(train_dataset$MasVnrType), ]
train_dataset <- train_dataset[complete.cases(train_dataset$BsmtExposure), ]
train_dataset <- train_dataset[complete.cases(train_dataset$BsmtFinType2), ]
train_dataset <- train_dataset[complete.cases(train_dataset$Electrical), ]
str(test_dataset)
summary(test_dataset)
#remove row that have NA values before 1461 after 1341
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtQual), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$GarageYrBlt), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$MasVnrType), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtExposure), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtFinType2), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$Electrical), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$KitchenQual), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$SaleType), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$MSZoning), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtCond), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$Functional), ]
# Fill missing values with mean of column
vars_to_check <- c("Id", "MSSubClass", "MSZoning", "LotArea", "LotShape",
"LandContour", "LotConfig", "LandSlope", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "OverallQual", "OverallCond",
"YearBuilt", "YearRemodAdd", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "MasVnrArea", "ExterQual", "ExterCond",
"Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
"BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
"Heating", "HeatingQC", "CentralAir", "Electrical", "X1stFlrSF",
"X2ndFlrSF", "LowQualFinSF", "GrLivArea", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "KitchenQual",
"TotRmsAbvGrd", "Functional", "Fireplaces", "GarageType",
"GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"X3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal", "MoSold", "YrSold",
"SaleType", "SaleCondition", "SalePrice")
# Apply the function to each variable
result <- sapply(vars_to_check, function(var) sum(is.na(train_dataset[[var]])))
result1 <- sapply(vars_to_check, function(var) sum(is.na(test_dataset[[var]])))
# Print the results
print(result)
print(result1)
str(train_dataset)
summary(train_dataset)
convert_to_factor <- function(data, column_names) {
for (col in column_names) {
data[[col]] <- factor(data[[col]])
}
return(data)
}
train_dataset <- convert_to_factor(train_dataset, c("MSZoning", "HouseStyle","LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
test_dataset <- convert_to_factor(test_dataset, c("MSZoning", "HouseStyle","LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
convert_to_numeric <- function(data, column_names) {
for (col in column_names) {
data[[col]] <- as.numeric(data[[col]])
}
return(data)
}
train_dataset <- convert_to_numeric(train_dataset, c("MSZoning","HouseStyle", "LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
test_dataset <- convert_to_numeric(test_dataset, c("MSZoning","HouseStyle", "LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
result <- sapply(vars_to_check, function(var) sum(is.na(train_dataset[[var]])))
result1 <- sapply(vars_to_check, function(var) sum(is.na(test_dataset[[var]])))
test_dataset$BsmtQual[is.na(test_dataset$BsmtQual)] <- mean(test_dataset$BsmtQual, na.rm = TRUE)
test_dataset$GarageYrBlt[is.na(test_dataset$GarageYrBlt)] <- mean(test_dataset$GarageYrBlt, na.rm = TRUE)
test_dataset$MasVnrType[is.na(test_dataset$MasVnrType)] <- mean(test_dataset$MasVnrType, na.rm = TRUE)
test_dataset$BsmtExposure[is.na(test_dataset$BsmtExposure)] <- mean(test_dataset$BsmtExposure, na.rm = TRUE)
test_dataset$BsmtFinType2[is.na(test_dataset$BsmtFinType2)] <- mean(test_dataset$BsmtFinType2, na.rm = TRUE)
test_dataset$Electrical[is.na(test_dataset$Electrical)] <- mean(test_dataset$Electrical, na.rm = TRUE)
test_dataset$KitchenQual[is.na(test_dataset$KitchenQual)] <- mean(test_dataset$KitchenQual, na.rm = TRUE)
test_dataset$SaleType[is.na(test_dataset$SaleType)] <- mean(test_dataset$SaleType, na.rm = TRUE)
test_dataset$MSZoning[is.na(test_dataset$MSZoning)] <- mean(test_dataset$MSZoning, na.rm = TRUE)
test_dataset$BsmtCond[is.na(test_dataset$BsmtCond)] <- mean(test_dataset$BsmtCond, na.rm = TRUE)
test_dataset$Functional[is.na(test_dataset$Functional)] <- mean(test_dataset$Functional, na.rm = TRUE)
# Check if columns you want to select exist
cols_to_scale <- c("MSSubClass", "MSZoning", "LotArea", "LotShape",
"LandContour", "LotConfig", "LandSlope", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "OverallQual", "OverallCond",
"YearBuilt", "YearRemodAdd", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "MasVnrArea", "ExterQual", "ExterCond",
"Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
"BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
"Heating", "HeatingQC", "CentralAir", "Electrical", "X1stFlrSF",
"X2ndFlrSF", "LowQualFinSF", "GrLivArea", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "KitchenQual",
"TotRmsAbvGrd", "Functional", "Fireplaces", "GarageType",
"GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"X3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal", "MoSold", "YrSold",
"SaleType", "SaleCondition")
cols_to_scale <- trimws(cols_to_scale)
train_dataset[, cols_to_scale] <- scale(train_dataset[, cols_to_scale])
# Check column names in test_dataset
names(test_dataset)
cols_to_scale <- trimws(cols_to_scale)
test_dataset[, cols_to_scale] <- scale(test_dataset[, cols_to_scale])
#read the data
library(readr)
library(dplyr)
train_dataset<-read.csv("train.csv")
test_dataset <-read_csv("test.csv")
print(train_dataset)
str(train_dataset)
summary(train_dataset)
# Columns to remove
cols_to_remove <- c("Street", "Alley", "Utilities", "PoolQC", "Fence", "MiscFeature", "FireplaceQu","LotFrontage")
# Remove the columns
train_dataset <- select(train_dataset, -one_of(cols_to_remove))
test_dataset <- select(test_dataset, -one_of(cols_to_remove))
str(train_dataset)
summary(train_dataset)
#remove row that have NA values before 1461 after 1341
train_dataset <- train_dataset[complete.cases(train_dataset$BsmtQual), ]
train_dataset <- train_dataset[complete.cases(train_dataset$GarageYrBlt), ]
train_dataset <- train_dataset[complete.cases(train_dataset$MasVnrType), ]
train_dataset <- train_dataset[complete.cases(train_dataset$BsmtExposure), ]
train_dataset <- train_dataset[complete.cases(train_dataset$BsmtFinType2), ]
train_dataset <- train_dataset[complete.cases(train_dataset$Electrical), ]
str(test_dataset)
summary(test_dataset)
#remove row that have NA values before 1461 after 1341
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtQual), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$GarageYrBlt), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$MasVnrType), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtExposure), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtFinType2), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$Electrical), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$KitchenQual), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$SaleType), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$MSZoning), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$BsmtCond), ]
# test_dataset <- test_dataset[complete.cases(test_dataset$Functional), ]
# Fill missing values with mean of column
vars_to_check <- c("Id", "MSSubClass", "MSZoning", "LotArea", "LotShape",
"LandContour", "LotConfig", "LandSlope", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "OverallQual", "OverallCond",
"YearBuilt", "YearRemodAdd", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "MasVnrArea", "ExterQual", "ExterCond",
"Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
"BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
"Heating", "HeatingQC", "CentralAir", "Electrical", "X1stFlrSF",
"X2ndFlrSF", "LowQualFinSF", "GrLivArea", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "KitchenQual",
"TotRmsAbvGrd", "Functional", "Fireplaces", "GarageType",
"GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"X3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal", "MoSold", "YrSold",
"SaleType", "SaleCondition", "SalePrice")
# Apply the function to each variable
result <- sapply(vars_to_check, function(var) sum(is.na(train_dataset[[var]])))
result1 <- sapply(vars_to_check, function(var) sum(is.na(test_dataset[[var]])))
# Print the results
print(result)
print(result1)
str(train_dataset)
summary(train_dataset)
convert_to_factor <- function(data, column_names) {
for (col in column_names) {
data[[col]] <- factor(data[[col]])
}
return(data)
}
train_dataset <- convert_to_factor(train_dataset, c("MSZoning", "HouseStyle","LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
test_dataset <- convert_to_factor(test_dataset, c("MSZoning", "HouseStyle","LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
convert_to_numeric <- function(data, column_names) {
for (col in column_names) {
data[[col]] <- as.numeric(data[[col]])
}
return(data)
}
train_dataset <- convert_to_numeric(train_dataset, c("MSZoning","HouseStyle", "LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
test_dataset <- convert_to_numeric(test_dataset, c("MSZoning","HouseStyle", "LotShape", "LotConfig", "LandContour", "LandSlope", "Neighborhood", "Condition1",
"BldgType", "RoofStyle", "RoofMatl", "Exterior1st", "Condition2", "Exterior2nd", "MasVnrType",
"RoofMatl", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure",
"BsmtFinType1", "BsmtFinType2", "Heating","HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "GarageType",
"GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition"))
result <- sapply(vars_to_check, function(var) sum(is.na(train_dataset[[var]])))
result1 <- sapply(vars_to_check, function(var) sum(is.na(test_dataset[[var]])))
test_dataset$BsmtQual[is.na(test_dataset$BsmtQual)] <- mean(test_dataset$BsmtQual, na.rm = TRUE)
test_dataset$GarageYrBlt[is.na(test_dataset$GarageYrBlt)] <- mean(test_dataset$GarageYrBlt, na.rm = TRUE)
test_dataset$MasVnrType[is.na(test_dataset$MasVnrType)] <- mean(test_dataset$MasVnrType, na.rm = TRUE)
test_dataset$BsmtExposure[is.na(test_dataset$BsmtExposure)] <- mean(test_dataset$BsmtExposure, na.rm = TRUE)
test_dataset$BsmtFinType2[is.na(test_dataset$BsmtFinType2)] <- mean(test_dataset$BsmtFinType2, na.rm = TRUE)
test_dataset$Electrical[is.na(test_dataset$Electrical)] <- mean(test_dataset$Electrical, na.rm = TRUE)
test_dataset$KitchenQual[is.na(test_dataset$KitchenQual)] <- mean(test_dataset$KitchenQual, na.rm = TRUE)
test_dataset$SaleType[is.na(test_dataset$SaleType)] <- mean(test_dataset$SaleType, na.rm = TRUE)
test_dataset$MSZoning[is.na(test_dataset$MSZoning)] <- mean(test_dataset$MSZoning, na.rm = TRUE)
test_dataset$BsmtCond[is.na(test_dataset$BsmtCond)] <- mean(test_dataset$BsmtCond, na.rm = TRUE)
test_dataset$Functional[is.na(test_dataset$Functional)] <- mean(test_dataset$Functional, na.rm = TRUE)
# Check if columns you want to select exist
cols_to_scale <- c("MSSubClass", "MSZoning", "LotArea", "LotShape",
"LandContour", "LotConfig", "LandSlope", "Neighborhood", "Condition1",
"Condition2", "BldgType", "HouseStyle", "OverallQual", "OverallCond",
"YearBuilt", "YearRemodAdd", "RoofStyle", "RoofMatl", "Exterior1st",
"Exterior2nd", "MasVnrType", "MasVnrArea", "ExterQual", "ExterCond",
"Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1",
"BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF",
"Heating", "HeatingQC", "CentralAir", "Electrical", "X1stFlrSF",
"X2ndFlrSF", "LowQualFinSF", "GrLivArea", "BsmtFullBath", "BsmtHalfBath",
"FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "KitchenQual",
"TotRmsAbvGrd", "Functional", "Fireplaces", "GarageType",
"GarageYrBlt", "GarageFinish", "GarageCars", "GarageArea", "GarageQual",
"GarageCond", "PavedDrive", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"X3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal", "MoSold", "YrSold",
"SaleType", "SaleCondition")
cols_to_scale <- trimws(cols_to_scale)
train_dataset[, cols_to_scale] <- scale(train_dataset[, cols_to_scale])
# Check column names in test_dataset
names(test_dataset)
cols_to_scale <- trimws(cols_to_scale)
test_dataset[, cols_to_scale] <- scale(test_dataset[, cols_to_scale])
install.packages("caret")
library(caret)
install.packages("caret")
data_df <- as.data.frame(train_dataset)
data_df_test <- as.data.frame(test_dataset)
model <- lm(SalePrice ~ MSZoning + LotShape + LotConfig + LandContour + LandSlope + Neighborhood + Condition1 +
BldgType + RoofStyle + RoofMatl + Exterior1st + Condition2 + Exterior2nd + MasVnrType +
ExterQual + ExterCond + Foundation + BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 +
BsmtFinType2 + Heating + HeatingQC + CentralAir + Electrical + KitchenQual + Functional +
GarageType + GarageFinish + GarageQual + GarageCond + PavedDrive + SaleType + SaleCondition,
data = data_df)
# Split data into training and validation sets
trainIndex <- createDataPartition(data_df$SalePrice, p = 0.7, list = FALSE)
data_df <- as.data.frame(train_dataset)
data_df_test <- as.data.frame(test_dataset)
model <- lm(SalePrice ~ MSZoning + LotShape + LotConfig + LandContour + LandSlope + Neighborhood + Condition1 +
BldgType + RoofStyle + RoofMatl + Exterior1st + Condition2 + Exterior2nd + MasVnrType +
ExterQual + ExterCond + Foundation + BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 +
BsmtFinType2 + Heating + HeatingQC + CentralAir + Electrical + KitchenQual + Functional +
GarageType + GarageFinish + GarageQual + GarageCond + PavedDrive + SaleType + SaleCondition,
data = data_df)
# Split data into training and validation sets
trainIndex <- createDataPartition(data_df$SalePrice, p = 0.7, list = FALSE)
install.packages("caret")
library(caret)
# Split data into training and validation sets
trainIndex <- createDataPartition(data_df$SalePrice, p = 0.7, list = FALSE)
train_data <- data_df[trainIndex, ]
validation_data <- data_df[-trainIndex, ]
library(e1071)
# Fit SVM model
model <- svm(SalePrice ~ ., data = data_df)
# Make predictions on validation set using SVM model
predictions <- predict(model, newdata = validation_data)
# Evaluate model accuracy using MSE and R-squared
mse <- mean((predictions - validation_data$SalePrice)^2)
accuracy <- 100 * (1 - mse/var(validation_data$SalePrice))
R2 <- 1 - mse/var(validation_data$SalePrice)
cat(paste0("SVM accuracy: ", round(accuracy, 2), "%"))
cat(paste0("SVM MSE: ", round(mse, 2)))
rmse <- sqrt(mse)
cat(paste0("SVM RMSE: ", round(rmse, 2)))
cat(paste0("SVM R-squared: ", round(R2, 2)))
# Generate predictions for test dataset
predictions <- predict(model, newdata = test_dataset)
submission <- data.frame(Id = test_dataset$Id[1:length(predictions)], SalePrice = predictions)
write.csv(submission, file = "newSubmission.csv", row.names = FALSE)
# Make predictions on validation set using linear regression model
predictions <- predict(model, newdata = validation_data)
# Evaluate model accuracy using R-squared
accuracy <- summary(model)$r.squared * 100
mse <- mean((predictions - validation_data$SalePrice)^2)
rmse <- sqrt(mse)
cat(paste0("Linear regression RMSE: ", round(rmse, 2)))
cat(paste0("Linear regression accuracy: ", round(accuracy, 2), "%\n"))
cat(paste0("Linear regression MSE: ", round(mse, 2), "\n"))
cat(paste0("Linear regression R-squared: ", round(r_squared, 2), "\n"))
# Make predictions on validation set using linear regression model
predictions <- predict(model, newdata = validation_data)
# Evaluate model accuracy using R-squared
accuracy <- summary(model)$r.squared * 100
mse <- mean((predictions - validation_data$SalePrice)^2)
rmse <- sqrt(mse)
cat(paste0("Linear regression RMSE: ", round(rmse, 2)))
#Fit linear regression model
# Predict SalePrice values for validation_data using model
predictions <- predict(model, newdata = validation_data)
# Calculate RMSE
mse <- mean((predictions - validation_data$SalePrice)^2)
rmse <- sqrt(mse)
# Print RMSE to console
print(rmse)
#Fit linear regression model
# Predict SalePrice values for validation_data using model
predictions <- predict(model, newdata = validation_data)
# Calculate RMSE
mse <- mean((predictions - validation_data$SalePrice)^2)
rmse <- sqrt(mse)
# Print RMSE to console
print("RMSE For Linear Rigrission is:",rmse)
print(rmse)
# Predict SalePrice values for validation_data using model
predictions <- predict(model, newdata = validation_data)
# Calculate RMSE
mse <- mean((predictions - validation_data$SalePrice)^2)
rmse <- sqrt(mse)
print("RMSE For Linear Regression is:")
print(rmse)
predictions <- predict(model, newdata = validation_data)
# Calculate RMSE
mse <- mean((predictions - validation_data$SalePrice)^2)
rmse <- sqrt(mse)
cat(paste0("RMSE For Linear Regression is:", rmse))
cat(paste0("RMSE For Linear Regression is:", round(rmse, 2)))
